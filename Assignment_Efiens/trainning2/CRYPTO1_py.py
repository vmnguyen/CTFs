#!/usr/bin/env python2
# Look at: https://www.wikiwand.com/en/RSA_(cryptosystem)
	
import gmpy2


# x is unknown

def generate_key(bitlength):
	temp = gmpy2.next_prime(2**bitlength)

	for i in range(x):
		temp = gmpy2.next_prime(temp)

	p = gmpy2.next_prime(temp)
	q = gmpy2.next_prime(p)
	return p,q 

#p,q = generate_key(512)
N = "0xb197d3afe713816582ee988b276f635800f728f118f5125de1c7c1e57f2738351de8ac643c118a5480f867b6d8756021911818e470952bd0a5262ed86b4fc4c2b7962cd197a8bd8d8ae3f821ad712a42285db67c85983581c4c39f80dbb21bf700dbd2ae9709f7e307769b5c0e624b661441c1ddb62ef1fe7684bbe61d8a19e7"
P = "0xc315d99cf91a018dafba850237935b2d981e82b02d994f94db0a1ae40d1fc7ab9799286ac68d620f1102ef515b348807060e6caec5320e3dceb25a0b98356399"
Q = "0xe90bbb3d4f51311f0b7669abd04e4cc48687ad0e168e7183a9de3ff9fd2d2a3a50303a5109457bd45f0abe1c5750edfaff1ad87c13eed45e1b4bd2366b49d97f"
D = "0x496747c7dceae300e22d5c3fa7fd1242bda36af8bc280f7f5e630271a92cbcbeb7ae04132a00d5fc379274cbce8c353faa891b40d087d7a4559e829e513c97467345adca3aa66550a68889cf930ecdfde706445b3f110c0cb4a81ca66f8630ed003feea59a51dc1d18a7f6301f2817cb53b1fb58b2a5ad163e9f1f9fe463b901"

'''
p = 13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006126447
q = 13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006126613
e = 65537
n = 179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430640612018221166261755512133629849953350393012937915118193265648981443929352046744666301134578477655997264548134425156996403803630464963997803049287253474369834011
'''


n = int(N,16)

p = int(P,16)
q = int(Q,16)
k = (int)(p*q)
e = 65537
print (int)(k - n)
phi = (p-1)*(q-1)
d = gmpy2.powmod(e,-1, phi)
assert d*e % phi == 1

print 'Public Key = ', n 
print 'Exponent = ', e 
print 'Sum p+q = ', p+q 

def encrypt(message):
	message = int(message.encode('hex'),16)
	cipher = gmpy2.powmod(message, e, n)
	print 'cipher = ', cipher
	return cipher

def decrypt(cipher, d):
	temp = gmpy2.powmod(cipher, d, n)
	print temp,'temp'
	message = hex(temp).lstrip('0x')
	print 'message = ', message
	return message.decode('hex')
Cipher =  "58ae101736022f486216e290d39e839e7d02a124f725865ed1b5eea7144a4c40828bd4d14dcea967561477a516ce338f293ca86efc72a272c332c5468ef43ed5d8062152aae9484a50051d71943cf4c3249d8c4b2f6c39680cc75e58125359edd2544e89f54d2e5cbed06bb3ed61e5ca7643ebb7fa04638aa0a0f23955e5b5d9"
cipher = int(Cipher,16)
print decrypt(cipher,d)
""" 
# Output of the program

Public Key =  179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430640612018221166261755512133629849953350393012937915118193265648981443929352046744666301134578477655997264548134425156996403803630464963997803049287253474369834011
Exponent =  65537
		   2681561585988519419914804999641169225495873164118478675544712288744352806014709395360374859633380685538006371637297210170750776562389313989286729801216
Sum p+q =  26815615859885194199148049996411692254958731641184786755447122887443528060147093953603748596333806855380063716372972101707507765623893139892867298012253060
cipher =  10196964375781669480585800866901719066465890491449595039019798570507773116713296838386780701839092614557201979072642622261168711518889621655822579514898560776687408112512432895291003129668746147856122065664807624732926920596568541221352359829257114313977150461576026421068588582798434371759594765504984444451
"""